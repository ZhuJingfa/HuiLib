<?php
namespace HuiLib\Helper;
	
/**
 * 农历阳历转换模块
 * 
 * 农历:lunar 阳历:solar
 * 
 * @since 2013/10/27
 */
class NongLi {
	/**
	 * 定义公历月分天数
	 * @var array
	 */
	private  $_SMDay = array(1 => 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);
	
	/**
	 * 农历从1950年开始
	 * @var array
	 */
	private  $_LStart = 1950 ;
	
	protected static $instance=NULL;
	
	private  $_LMDay = array(
		//差：该年的农历正月初一到该年公历1月1日的天数；1~12：农历月份天数；闰：如有闰月，记录该月平月天数
		//    差  1  2  3  4  5  6  7  8  9 10 11 12 闰
		array(47,29,30,30,29,30,30,29,29,30,29,30,29),
		array(36,30,29,30,30,29,30,29,30,29,30,29,30),
	    array(6,29,30,29,30,59,29,30,30,29,30,29,30,29),    //五月29 闰五月30
	   	array(44,29,30,29,29,30,30,29,30,30,29,30,29),
	    array(33,30,29,30,29,29,30,29,30,30,29,30,30),
	    array(23,29,30,59,29,29,30,29,30,29,30,30,30,29),    //三月29 闰三月30
	    array(42,29,30,29,30,29,29,30,29,30,29,30,30),
	    array(30,30,29,30,29,30,29,29,59,30,29,30,29,30),    //八月30 闰八月29
	    array(48,30,30,30,29,30,29,29,30,29,30,29,30),
	    array(38,29,30,30,29,30,29,30,29,30,29,30,29),
	    array(27,30,29,30,29,30,59,30,29,30,29,30,29,30),    //六月30 闰六月29
	    array(45,30,29,30,29,30,29,30,30,29,30,29,30),
	    array(35,29,30,29,29,30,29,30,30,29,30,30,29),
	    array(24,30,29,30,58,30,29,30,29,30,30,30,29,29),    //四月29 闰四月29
	    array(43,30,29,30,29,29,30,29,30,29,30,30,30),
	    array(32,29,30,29,30,29,29,30,29,29,30,30,29),
	    array(20,30,30,59,30,29,29,30,29,29,30,30,29,30),    //三月30 闰三月29
	    array(39,30,30,29,30,30,29,29,30,29,30,29,30),
	    array(29,29,30,29,30,30,29,59,30,29,30,29,30,30),    //七月30 闰七月29
	    array(47,29,30,29,30,29,30,30,29,30,29,30,29),
	    array(36,30,29,29,30,29,30,30,29,30,30,29,30),
	    array(26,29,30,29,29,59,30,29,30,30,30,29,30,30),    //五月30 闰五月29
	    array(45,29,30,29,29,30,29,30,29,30,30,29,30),
	    array(33,30,29,30,29,29,30,29,29,30,30,29,30),
	    array(22,30,30,29,59,29,30,29,29,30,30,29,30,30),    //四月30 闰四月29
	    array(41,30,30,29,30,29,29,30,29,29,30,29,30),
	    array(30,30,30,29,30,29,30,29,59,29,30,29,30,30),    //八月30 闰八月29
	    array(48,30,29,30,30,29,30,29,30,29,30,29,29),
	    array(37,30,29,30,30,29,30,30,29,30,29,30,29),
	    array(27,30,29,29,30,29,60,29,30,30,29,30,29,30),    //六月30 闰六月30
	    array(46,30,29,29,30,29,30,29,30,30,29,30,30),
	    array(35,29,30,29,29,30,29,29,30,30,29,30,30),
	    array(24,30,29,30,58,30,29,29,30,29,30,30,30,29),    //四月29 闰四月29
	    array(43,30,29,30,29,29,30,29,29,30,29,30,30),
	    array(32,30,29,30,30,29,29,30,29,29,59,30,30,30),    //十月30 闰十月29
	    array(50,29,30,30,29,30,29,30,29,29,30,29,30),
	    array(39,29,30,30,29,30,30,29,30,29,30,29,29),
	    array(28,30,29,30,29,30,59,30,30,29,30,29,29,30),    //六月30 闰六月29
	    array(47,30,29,30,29,30,29,30,30,29,30,30,29),
	    array(36,30,29,29,30,29,30,29,30,29,30,30,30),
	    array(26,29,30,29,29,59,29,30,29,30,30,30,30,30),    //五月30 闰五月29
	    array(45,29,30,29,29,30,29,29,30,29,30,30,30),
	    array(34,29,30,30,29,29,30,29,29,30,29,30,30),
	    array(22,29,30,59,30,29,30,29,29,30,29,30,29,30),    //三月30 闰三月29
	    array(40,30,30,30,29,30,29,30,29,29,30,29,30),
	    array(30,29,30,30,29,30,29,30,59,29,30,29,30,30),    //八月30 闰八月29
	    array(49,29,30,29,30,30,29,30,29,30,30,29,29),
	    array(37,30,29,30,29,30,29,30,30,29,30,30,29),
	    array(27,30,29,29,30,58,30,30,29,30,30,29,30,29),    //五月29 闰五月29
	    array(46,30,29,29,30,29,29,30,29,30,30,30,29),
	    array(35,30,30,29,29,30,29,29,30,29,30,30,29),
	    array(23,30,30,29,59,30,29,29,30,29,30,29,30,30),    //四月30 闰四月29
	    array(42,30,30,29,30,29,30,29,29,30,29,30,29),
	    array(31,30,30,29,30,30,29,30,29,29,30,29,30),
	    array(21,29,59,30,30,29,30,29,30,29,30,29,30,30),    //二月30 闰二月29
	    array(39,29,30,29,30,29,30,30,29,30,29,30,29),
	    array(28,30,29,30,29,30,29,59,30,30,29,30,30,30),    //七月30 闰七月29
	    array(48,29,29,30,29,29,30,29,30,30,30,29,30),
	    array(37,30,29,29,30,29,29,30,29,30,30,29,30),
	    array(25,30,30,29,29,59,29,30,29,30,29,30,30,30),    //五月30 闰五月29
	    array(44,30,29,30,29,30,29,29,30,29,30,29,30),
	    array(33,30,29,30,30,29,30,29,29,30,29,30,29),
	    array(22,30,29,30,59,30,29,30,29,30,29,30,29,30),    //四月30 闰四月29
	    array(40,30,29,30,29,30,30,29,30,29,30,29,30),
	    array(30,29,30,29,30,29,30,29,30,59,30,29,30,30),    //九月30 闰九月29
	    array(49,29,30,29,29,30,29,30,30,30,29,30,29),
	    array(38,30,29,30,29,29,30,29,30,30,29,30,30),
	    array(27,29,30,29,30,29,59,29,30,29,30,30,30,29),    //六月29 闰六月30
	    array(46,29,30,29,30,29,29,30,29,30,29,30,30),
	    array(35,30,29,30,29,30,29,29,30,29,29,30,30),
	    array(24,29,30,30,59,30,29,29,30,29,30,29,30,30),    //四月30 闰四月29
	    array(42,29,30,30,29,30,29,30,29,30,29,30,29),
	    array(31,30,29,30,29,30,30,29,30,29,30,29,30),
	    array(21,29,59,29,30,30,29,30,30,29,30,29,30,30),    //二月30 闰二月29
	    array(40,29,30,29,29,30,29,30,30,29,30,30,29),
	    array(28,30,29,30,29,29,59,30,29,30,30,30,29,30),    //六月30 闰六月29
	    array(47,30,29,30,29,29,30,29,29,30,30,30,29),
	    array(36,30,30,29,30,29,29,30,29,29,30,30,29),
	    array(25,30,30,30,29,59,29,30,29,29,30,30,29,30),    //五月30 闰五月29
	    array(43,30,30,29,30,29,30,29,30,29,29,30,30),
	    array(33,29,30,29,30,30,29,30,29,30,29,30,29),
	    array(22,29,30,59,30,29,30,30,29,30,29,30,29,30),    //三月30 闰三月29
	    array(41,30,29,29,30,29,30,30,29,30,30,29,30),
	    array(30,29,30,29,29,30,29,30,29,30,30,59,30,30),    //十一月30 闰十一月29
	    array(49,29,30,29,29,30,29,30,29,30,30,29,30),
	    array(38,30,29,30,29,29,30,29,29,30,30,29,30),
	    array(27,30,30,29,30,29,59,29,29,30,29,30,30,29),    //六月29 闰六月30
	    array(45,30,30,29,30,29,29,30,29,29,30,29,30),
	    array(34,30,30,29,30,29,30,29,30,29,29,30,29),
	    array(23,30,30,29,30,59,30,29,30,29,30,29,29,30),    //五月30 闰五月29
	    array(42,30,29,30,30,29,30,29,30,30,29,30,29),
	    array(31,29,30,29,30,29,30,30,29,30,30,29,30),
	    array(21,29,59,29,30,29,30,29,30,30,29,30,30,30),    //二月30 闰二月29
	    array(40,29,30,29,29,30,29,29,30,30,29,30,30),
	    array(29,30,29,30,29,29,30,58,30,29,30,30,30,29),    //七月29 闰七月29
	    array(47,30,29,30,29,29,30,29,29,30,29,30,30),
	    array(36,30,29,30,29,30,29,30,29,29,30,29,30),
	    array(25,30,29,30,30,59,29,30,29,29,30,29,30,29),    //五月29 闰五月30
	    array(44,29,30,30,29,30,30,29,30,29,29,30,29),
	    array(32,30,29,30,29,30,30,29,30,30,29,30,29),
	    array(22,29,30,59,29,30,29,30,30,29,30,30,29,29),    //三月29 闰三月30		
	);
	
	protected function __construct()
	{
		//仅能通过getInstance()初始化
	}
	
	//农历年份、天数 1950-2050
	public function nl_mon_day($year) {
		if ($year < 1950 || $year > 2050) return false;
		$unit = $this->_LMDay [$year - 1950];
		$r = array ();
		$i = 1;
		foreach ( $unit as $k => $v ) {
			if ($k == 0 || $k == 13) continue;
			$mon =  $i ;
			if ($v > 30) {
				$r [$mon] = $unit [13];
				$mon .= '9';
				$r [$mon] = $v - $unit [13];
			} else {
				$r [$mon] = $v;
			}
			$i++;
		}
		
		return $r ? $r : false;
	}
	
	//是否闰年
	private function IsLeapYear($AYear) {
		return ($AYear % 4 == 0) && (($AYear % 100 != 0) || ($AYear % 400 == 0));
	}
	
	//公历该月的天数(year：年份； month：月份)
	private function GetSMon($year, $month) {
		if ($this->IsLeapYear ( $year ) && $month == 2)
			return 29;
		else
			return $this->_SMDay [$month];
	}
	
	//农历名称转换
	private function LYearName($year) {
		$tmp = '';
		$Name = array ("零", "一", "二", "三", "四", "五", "六", "七", "八", "九" );
		for($i = 0; $i < 4; $i ++)
			for($k = 0; $k < 10; $k ++)
				if ($year [$i] == $k)
					$tmp .= $Name [$k];
		return $tmp;
	}
	
	public function LMonName($month) {
		if ($month >= 1 && $month <= 12) {
			$Name = array (1 => "正", "二", "三", "四", "五", "六", "七", "八", "九", "十", "十一", "十二" );
			return $Name [$month];
		}
		return $month;
	}
	
	public function LDayName($day) {
		if ($day >= 1 && $day <= 30) {
			$Name = array (1 => "初一", "初二", "初三", "初四", "初五", "初六", "初七", "初八", "初九", "初十", "十一", "十二", "十三", "十四", "十五", "十六", "十七", "十八", "十九", "二十", "廿一", "廿二", "廿三", "廿四", "廿五", "廿六", "廿七", "廿八", "廿九", "三十" );
			return $Name [$day];
		}
		return $day;
	}
	
	//公历转农历(Sdate：公历日期)
	public function S2L($date) {
		$Ltype = 0;
		list ( $year, $month, $day ) = explode ( "-", $date );
		if ($year <= 1951 || $month <= 0 || $day <= 0 || $year >= 2051)
			return false;
		
		//获取查询日期到当年1月1日的天数
		$date1 = strtotime ( $year . "-01-01" ); //当年1月1日
		$date2 = strtotime ( $year . "-" . $month . "-" . $day );
		$days = round ( ($date2 - $date1) / 3600 / 24 );
		$days += 1;
		//获取相应年度农历数据，化成数组Larray
		$Larray = $this->_LMDay [$year - $this->_LStart];
		if ($days <= $Larray [0]) {
			$Lyear = $year - 1;
			$days = $Larray [0] - $days;
			$Larray = $this->_LMDay [$Lyear - $this->_LStart];
			if ($days < $Larray [12]) {
				$Lmonth = 12;
				$Lday = $Larray [12] - $days;
			} else {
				$Lmonth = 11;
				$days = $days - $Larray [12];
				$Lday = $Larray [11] - $days;
			}
		} else {
			$Lyear = $year;
			$days = $days - $Larray [0];
			for($i = 1; $i <= 12; $i ++) {
				if ($days > $Larray [$i])
					$days = $days - $Larray [$i];
				else {
					if ($days > 30) {
						$days = $days - $Larray [13];
						$Ltype = 1;
					}
					
					$Lmonth = $i;
					$Lday = $days;
					break;
				}
			}
		}
		
		//月份后加9表示闰月
		if ($Ltype)
			$Lmonth .= "9";
		$Ldate = $Lyear . "-" . $Lmonth . "-" . $Lday;	
		
		return $Ldate;
	}
	
	/**
	 * 农历转公历(date：农历日期； type：是否闰月)
	 * 
	 * 或直接从$extra传递农历年月日，月份大于12表示闰月
	 */
	public function L2S($date, $type = 0, $extra=array()) {
		if (!empty($date)){
			list ( $year, $month, $day ) = explode ( "-", $date );
		}elseif (!empty($extra)){
			list ( $year, $month, $day ) = $extra;
			if ($month > 12) {
				$month = substr ( $month, 0, - 1 );
				$type = 1;
			}
		}
		
		if ($year <= 1951 || $month <= 0 || $day <= 0 || $year >= 2051)
			return false;
		$Larray = $this->_LMDay [$year - $this->_LStart];
		if ($type == 1 && count ( $Larray ) <= 12)
			return false; //要求查询闰，但查无闰月
		//如果查询的农历是闰月并该年度农历数组存在闰月数据就获取
		if ($Larray [$month] > 30 && $type == 1 && count ( $Larray ) >= 13)
			$day = $Larray [13] + $day;
		
		//获取该年农历日期到公历1月1日的天数
		$days = $day;
		for($i = 0; $i <= $month - 1; $i ++)
			$days += $Larray [$i];
		
		//当查询农历日期距离公历1月1日超过一年时
		if ($days > 366 || ($this->GetSMon ( $month, 2 ) != 29 && $days > 365)) {
			$Syear = $year + 1;
			if ($this->GetSMon ( $month, 2 ) != 29)
				$days -= 366;
			else
				$days -= 365;
			if ($days > $this->_SMDay [1]) {
				$Smonth = 2;
				$Sday = $days - $this->_SMDay [1];
			} else {
				$Smonth = 1;
				$Sday = $days;
			}
		} else {
			$Syear = $year;
			for($i = 1; $i <= 12; $i ++) {
				if ($days > $this->GetSMon ( $Syear, $i ))
					$days -= $this->GetSMon ( $Syear, $i );
				else {
					$Smonth = $i;
					$Sday = $days;
					break;
				}
			}
		}
		return "$Syear-$Smonth-$Sday";//mktime ( 0, 0, 0, $Smonth, $Sday, $Syear );
	}
	
	/**
	 * 从农历转换到阳历生日
	 * 考虑闰月需求 $m参数可能大于12 比如69代表闰6月
	 * 传入年份需要更新到最新
	 */
	public function getYangBirth($year, $month, $day){
		if ($year< 1 || $day> 31 || $day< 1)
			return false;
		
		$runyue = 0;
		if ($month > 12) {
			$month = substr ( $month, 0, - 1 );
			$runyue = 1;
		}
		$new = $this->L2S ( "$year-$month-$day", $runyue );
		if (!$new){
			$new = $this->L2S ( "$year-$month-$day", 0 );//获取非闰月生日
		}
		@list ( $year, $month, $day ) = explode ( '-', $new );

		return mktime(0, 0, 0, $month, $day, $year);
	}
	
	/*
	 * 从农历年月日转为文字描述
	 */
	public function getNongLiDay($year, $month, $day){
		$runyue = 0;
		if ($month > 12) {
			$month = substr ( $month, 0, - 1 );
			$runyue = 1;
		}
		return $this->LYearName ( $year ) . '年' .($runyue?'闰':'').$this->LMonName ( $month ) . '月' . $this->LDayName ( $day );
	}
	
	/**
	 * 返回对象单例
	 */
	static function getInstance(){
		if (self::$instance===NULL){
			self::$instance=new self();
		}
		return self::$instance;
	}
}
?>